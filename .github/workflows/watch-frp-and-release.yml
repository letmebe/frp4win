name: Watch FRP and Create Custom Release

on:
  schedule:
    - cron: '0 0 1 * *'
    # - cron: '*/30 * * * *' # 每半小时运行一次
  workflow_dispatch: # 支持手动触发

jobs:
  check-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Get latest version from GitHub API
        id: get_version
        run: |
          LATEST_VERSION=$(curl -s "https://api.github.com/repos/fatedier/frp/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Latest version: $LATEST_VERSION"
          echo "version=$LATEST_VERSION" >> $GITHUB_ENV

      - name: Check marker release
        id: check-marker
        run: |
          set -e

          GITHUB_TOKEN=${{ secrets.GH_TOKEN }}
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d '/' -f1)
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f2)

          # 获取标记 release
          response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases/tags/custom-build-marker")

          MARKER_VERSION=""
          if echo "$response" | grep -q '"body":'; then
            MARKER_VERSION=$(echo "$response" | grep '"body":' | sed -E 's/.*"([^"]+)".*/\1/')
          fi

          echo "Marker version: $MARKER_VERSION"
          echo "Current version: ${{ env.version }}"

          if [ "$MARKER_VERSION" == "${{ env.version }}" ]; then
            echo "No new version found,skipping."
            echo "SKIP_RELEASE=true" >> $GITHUB_ENV
            exit 0
          else
            echo "New version detected. Proceeding..."
          fi

      - name: Download Windows AMD64 ZIP
        if: env.version != ''
        run: |
          VERSION=${{ env.version }}
          FILENAME="frp_${VERSION#v}_windows_amd64.zip"
          URL="https://github.com/fatedier/frp/releases/download/${VERSION}/${FILENAME}"
          echo "Downloading: $URL"
          curl -L -o "$FILENAME" "$URL"

      - name: Extract ZIP
        if: env.version != ''
        uses: montudor/action-zip@v1
        with:
          args: unzip -qq *.zip -d .

      - name: Add custom install.bat
        if: env.version != ''
        run: |
          unzip_dir=$(echo frp_*/)
          echo "Unzip directory: $unzip_dir"

          sudo chown -R runner:docker "$unzip_dir"
          chmod -R u+w "$unzip_dir"

          if [ -d "$unzip_dir" ]; then
            cp custom-files/install.bat "$unzip_dir/"
            cp custom-files/frpcs.xml "$unzip_dir/"
          else
            echo "Directory '$unzip_dir' does not exist!"
            exit 1
          fi

      - name: Repack into new ZIP (same name)
        if: env.version != ''
        run: |
          unzip_dir=$(echo frp_*/)
          original_zip=$(ls frp_*.zip)

          rm -f "$original_zip"
          zip -r "$original_zip" "$unzip_dir"

          echo "NEW_ZIP=$original_zip" >> $GITHUB_ENV

      - name: Create GitHub Release and Upload Asset
        if: env.version != '' && env.NEW_ZIP != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.version }}
          name: Custom Build for ${{ env.version }}
          body: Auto-generated custom build with frpcs.exe、frpcs.xml、install.bat added.
          draft: false
          prerelease: false
          files: ${{ env.NEW_ZIP }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Update marker release
        if: env.version != '' && env.NEW_ZIP != ''
        run: |
          GITHUB_TOKEN=${{ secrets.GH_TOKEN }}
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d '/' -f1)
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f2)
          CURRENT_VERSION=${{ env.version }}

          # 获取已有的 marker release
          response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases/tags/custom-build-marker")

          release_id=$(echo "$response" | grep '"id":' | head -n1 | sed -E 's/.*: ([0-9]+),*/\1/')

          if [ -z "$release_id" ]; then
            # 创建新的 draft release
            curl -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -d '{"tag_name":"custom-build-marker","name":"Custom Build Marker","body":"'"$CURRENT_VERSION"'","draft":true,"prerelease":false}' \
              "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases"
          else
            # 更新已有 release 的 body
            curl -X PATCH -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -d '{"body":"'"$CURRENT_VERSION"'"}' \
              "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases/$release_id"
          fi